library(tuneR)
library(seewave)
cutspec<-function(x) {
a<-readWave(x)
b<-fir(a,
from = 2500,
to = 10000,
bandpass = TRUE,
output="Wave")
c<-normalize(b, unit = c("24"))
png(filename = paste(x, ".png", sep = ""))
spectro(c,
wl = 512,
ovlp = 95,
collevels = seq(-42,0,6),
flim = c(0, 10),
osc = F,
scale = F,
colgrid = "gray",
cexlab = 0.8,
cexaxis = 0.7)
par(new=T)
try(timer(c,
dmin = 0.05,
envt = "hil",
msmooth=c(512, 90),
threshold = 10))
dev.off()
}
lapply(list.files(pattern = ".wav"), cutspec)
list.files()
# generate spectrograms + timer intervals for signal portion of every chopped recording
setwd("/Users/shelbypalmer/Documents/GitHub/Chickadee-Song-Analyses/AllSongsSPPUA")
cutspec<-function(x) {
a<-readWave(x)
b<-fir(a,
from = 2500,
to = 10000,
bandpass = TRUE,
output="Wave")
c<-normalize(b, unit = c("24"))
png(filename = paste(x, ".png", sep = ""))
spectro(c,
wl = 512,
ovlp = 95,
collevels = seq(-42,0,6),
flim = c(0, 10),
osc = F,
scale = F,
colgrid = "gray",
cexlab = 0.8,
cexaxis = 0.7)
par(new=T)
try(timer(c,
dmin = 0.05,
envt = "hil",
msmooth=c(512, 90),
threshold = 10))
dev.off()
}
lapply(list.files(pattern = ".wav"), cutspec)
dev.off()
?png
cutspec<-function(x) {
a<-readWave(x)
b<-fir(a,
from = 2500,
to = 10000,
bandpass = TRUE,
output="Wave")
c<-normalize(b, unit = c("24"))
png(filename = paste(x, ".png", sep = ""),
width = 634,
height = 327)
spectro(c,
wl = 512,
ovlp = 95,
collevels = seq(-42,0,6),
flim = c(0, 10),
osc = F,
scale = F,
colgrid = "gray",
cexlab = 0.8,
cexaxis = 0.7)
par(new=T)
try(timer(c,
dmin = 0.05,
envt = "hil",
msmooth=c(512, 90),
threshold = 10))
dev.off()
}
cutspec(list.files()[1])
dev.off()
dev.off()
lapply(list.files(pattern = ".wav"), cutspec)
getwd()
setwd("/Users/shelbypalmer/Documents/GitHub/Chickadee-Genetic-Analyses/HZCH_28Apr2023")
data <- read.table("HZCH_K2.output")
View(data)
setwd("/Users/shelbypalmer/Documents/GitHub/Chickadee-Genetic-Analyses")
metadata <- read.csv("PCR-RFLP_data_for_poppr_31mar2023.csv")
View(metadata)
ind <- metadata[3,1]
cbind(data,ind)
ind <- metadata[3:length(ind[,1]),1]
ind[,1]
ind <- metadata[3:length(metadata[,1]),1]
cbind(data,ind)
rm(data)
metadata <- read.table("HZCH_Structure1_data.txt")
View(metadata)
ind <- metadata[,1]
ind
ind <- unique(metadata[,1])
ind
length(ind)
metadata <- read.table("HZCH_StructureInput_Final.txt")
ind <- unique(metadata[,1])
ind
length(ind)
setwd("/Users/shelbypalmer/Documents/GitHub/Chickadee-Genetic-Analyses/HZCH_28Apr2023")
data <- read.table("HZCH_K2.output")
setwd("/Users/shelbypalmer/Documents/GitHub/Chickadee-Genetic-Analyses")
metadata <- read.table("HZCH_StructureInput_Final.txt")
ind <- unique(metadata[,1])
cbind(data,ind)
View(data)
data <- cbind(data,ind)
view(metadata)
View(metadata)
data <- data.frame(ind_ID = data$ind,
prob_BC = data$V6,
prob_CA = data$V7)
data$ind_ID[7]
pops <- metadata$V2
pops <- pops[seq(1,length(pops),2)]
length(pops)
data <- data.frame(ind_ID = data$ind,
pop_ID = pops,
prob_BC = data$V6,
prob_CA = data$V7)
pops
setwd("/Users/shelbypalmer/Documents/GitHub/Chickadee-Genetic-Analyses/HZCH_28Apr2023")
data <- read.table("HZCH_K2.output")
setwd("/Users/shelbypalmer/Documents/GitHub/Chickadee-Genetic-Analyses")
metadata <- read.table("HZCH_StructureInput_Final.txt")
ind <- unique(metadata[,1])
data <- cbind(data,ind)
View(data)
pops <- metadata$V2
pops <- pops[seq(1,length(pops),2)]
data <- data.frame(ind_ID = data$ind,
pop_ID = pops,
prob_BC = data$V6,
prob_CA = data$V7)
library(ggplot2)
data <- read.table("HZCH_STRUCTURE_LM.output")
setwd("/Users/shelbypalmer/Documents/GitHub/Chickadee-Genetic-Analyses/HZCH_01May2023")
data <- read.table("HZCH_STRUCTURE_LM.output")
setwd("/Users/shelbypalmer/Documents/GitHub/Chickadee-Genetic-Analyses")
metadata <- read.table("HZCH_StructureInput_Final.txt")
ind <- unique(metadata[,1])
pops <- metadata$V2
pops <- pops[seq(1,length(pops),2)]
data <- data.frame(ind_ID = ind,
pop_ID = pops,
prob_CA = data$V6,
prob_BC = data$V7)
View(data)
install.packages("strataG")
if (!require("devtools")) install.packages("devtools")
devtools::install_github("ericarcher/strataG", build_vignettes = T)
pkgbuild::check_build_tools(debug = TRUE)
